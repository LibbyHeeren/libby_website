{
  "hash": "22da78ef1df7d872821ed51bc5e1c9b6",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"The Ellsworth Project: Part 5\"\ndescription: \"Part 5 of a series documenting my learning process as I code a Shiny app that generates random artwork inspired by Ellsworth Kelly's Spectrum Colors by Chance Series\"\ndate: \"2025-06-07\"\nimage: images/00-cover-image.png\nimage-alt: \"Part of a simple shiny app showing the user selecting a purple color and part of a plot with purple dots\"\ncategories:\n  - R\n  - Shiny\n# bibliography: references.bib\n# number-sections: true\nnumber-depth: 2\nexecute: \n  eval: false # no code chunks will evaluate, just the code will show up\ndraft: false # true prevents this from going in the listing\nformat:\n  html:\n    fig-align: center\n---\n\n\n\n------------------------------------------------------------------------\n\n## February 25th, 2024\n\nSuper tired today, so instead of working on brain-heavy stuff, I‚Äôm going to gather resources for the project. I‚Äôll leave finishing the ‚Äúpiece III‚Äù prototype for tomorrow. I know I need to gather some methods of adding the functionality I want to the app, so I‚Äôll start with a list:\n\n- color picker for shiny app - need way to choose multiple colors\n    - `{colourpicker}`  \n    Example page: [https://daattali.com/shiny/colourInput/](https://daattali.com/shiny/colourInput/)  \n    Example page code: [https://github.com/daattali/colourpicker/blob/master/inst/examples/colourInput/app.R](https://github.com/daattali/colourpicker/blob/master/inst/examples/colourInput/app.R)\n    \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(shiny)\n\nshinyApp(\n  ui = fluidPage(\n    colourpicker::colourInput(\"col\", \"Select colour\", \"purple\"),\n    plotOutput(\"plot\")\n  ),\n  server = function(input, output) {\n    output$plot <- renderPlot({\n      set.seed(1)\n      plot(rnorm(50), bg = input$col, col = input$col, pch = 21)\n    })\n  }\n)\n```\n:::\n\n\n\n![](images/01-color-picker-shiny.png){fig-align=\"center\"}\n\n- Multiple color pickers in a split issue: [https://stackoverflow.com/questions/49011078/multiple-colourpickers-within-splitlayout-colour-box-gets-hidden](https://stackoverflow.com/questions/49011078/multiple-colourpickers-within-splitlayout-colour-box-gets-hidden)\n- Way to create a swatch or palette table/plot to show user what their color selections look like together and to also be able to save as a file along with the plot\n    - considered putting it in a legend at the bottom, but I‚Äôd rather it be standalone\n    - `{scales}` has `show_col()`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(scales)\n\n# Define the colors\ncolors <- c(#\"#EDEFEE\", # Paper\n  \"#1A8BB3\", # Teal - no longer teal, just bright blue\n  \"#0950AE\", # Dark blue\n  \"#4DACE5\", # Light blue\n  \"#126DDB\", # Blue\n  \"#E48DC4\", # Pink\n  \"#ABA9E8\", # Light purple\n  \"#872791\", # Purple\n  \"#6D1617\", # Dark red\n  \"#B81634\", # Red\n  \"#DF3B43\", # Red orange\n  \"#E35C47\", # Orange\n  \"#EB8749\", # Light orange\n  \"#F6E254\", # Yellow\n  \"#7B442D\", # Brown\n  \"#000000\", # Black\n  \"#1A6E7E\", # Dark green - no longer dark green, now looks teal\n  \"#7CBF7B\", # Green\n  \"#ADD2B8\") # Light green\n\nscales::show_col(colors) # I don't love that it has blank squares\n```\n:::\n\n\n\n![](images/02-scales-show_col-swatch.png){fig-align=\"center\"}\n\n- `{hues}` package has `swatch()`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(hues)\n\n# Define the colors\ncolors <- c(#\"#EDEFEE\", # Paper\n  \"#1A8BB3\", # Teal - no longer teal, just bright blue\n  \"#0950AE\", # Dark blue\n  \"#4DACE5\", # Light blue\n  \"#126DDB\", # Blue\n  \"#E48DC4\", # Pink\n  \"#ABA9E8\", # Light purple\n  \"#872791\", # Purple\n  \"#6D1617\", # Dark red\n  \"#B81634\", # Red\n  \"#DF3B43\", # Red orange\n  \"#E35C47\", # Orange\n  \"#EB8749\", # Light orange\n  \"#F6E254\", # Yellow\n  \"#7B442D\", # Brown\n  \"#000000\", # Black\n  \"#1A6E7E\", # Dark green - no longer dark green, now looks teal\n  \"#7CBF7B\", # Green\n  \"#ADD2B8\") # Light green\n\nhues::swatch(colors) # this is definitely more palette-like\n```\n:::\n\n\n\n![](images/03-hues-swatch.png){fig-align=\"center\"}\n\n## February 26th, 2024\n\nI can‚Äôt stop thinking about colors! Ellsworth is all about color, and he‚Äôs infested my brain! I want to revisit some of his other paintings and pieces for color inspiration (I say pieces because my favorite Spectrum Colors Arranged by Chance pieces are collages of paper pasted on paper, they‚Äôre not paint), because it looks like he used the same colors on other works outside of the ‚ÄúArranged by Chance‚Äù series. I probably won‚Äôt re-sample or anything, I just want to bathe in the colors. The more I learn about the spectrum of visible colors, the more I realize how fascinating it is. Our ROYGBIV-style separation of colors is arbitrary - there is no dividing line between colors. It's a continuous spectrum. The FREEDOM and ambiguity that provides is maddening and wonderful.    \n\n\n![Spectrum I, Ellsworth Kelly, 1953](images/04-spectrum-1.jpeg){fig-align=\"center\"}  \n\n![Spectrum IV, Ellsworth Kelly, 1967](images/05-spectrum-4.png){fig-align=\"center\"}  \n\n![Study for Spectrum V, Ellsworth Kelly, 1969, Oil on canvas, Austin: Blanton Museum of Art, üì∑ zug55 on flickr](images/06-spectrum-5-study.jpg){fig-align=\"center\"}  \n\n![Colors for a Large Wall, Ellsworth Kelly, 1951](images/07-colors-for-a-large-wall.jpeg){fig-align=\"center\"}  \n\n![Sanary, Ellsworth Kelly, 1952, from the collection of Robert and Marguerite Hoffman](images/08-sanary.jpg){fig-align=\"center\"}  \n\n![Spectrum II, Ellsworth Kelly, 1966-1967](images/09-spectrum-2.png){fig-align=\"center\"}  \n\n![Spectrum, Ellsworth Kelly, 1973, screen print on arches 88 paper](images/10-spectrum-screen-print.png){fig-align=\"center\"}  \n\n![Spectrum VI, Ellsworth Kelly, 1969](images/11-spectrum-6.png){fig-align=\"center\"}  \n\nAhhhh. That was a nice color bath. I needed that after having to reinstall my OS to try to revive my laptop. (Which worked! For now.) On to the final plot code! The other night, I left myself a note on what was next:\n\n> Recreate the piece VII random grid and then use a sample function and a random function to assign background-color squares in the negative space using 1-prob. The random number is to compare to the prob. If it‚Äôs below (or above, whatever I want), then it will assign a white square. If not, it will do nothing. I guess using `case_when`. Or something.  \n\nThat sounds pretty doable, I think. Just need to write things out. I always write things out. All my fellow aphantastics know what's up. It all goes down on paper.  \n\n![](images/12-mutate-runif-notes.jpeg){fig-align=\"center\"}\n\nTranslating those thoughts into code:  \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load packages\nlibrary(tidyverse)\nlibrary(pracma)\n\n# Create functions needed (will source these)\n\n# Define a function to generate a random vector of colors\ngenerate_color_vector <- function(size, colors) {\n\n  # Create a size^2 vector filled with a random sample of colors from a color list\n  color_vector <- sample(x = colors,\n                         size = size * size,   # \"size\" is the # of squares on each side\n                         replace = TRUE)\n\n  return(color_vector)\n}\n\n# Create function that calculates probabilities based on circuits\nget_prob_vector <- function(circuits){\n\n  first10perc <- seq(0, 0.02857143, length.out = round(circuits*.10)+1) # 3\n\n  last90perc_length <- circuits - length(first10perc)\n\n  last10perc_length <- round(last90perc_length * (1/9)) # 2\n\n  middle80perc_length <- last90perc_length - last10perc_length # 15\n\n  middle80perc <- seq(0.02857143, 1, length.out = middle80perc_length+2)[-c(1, middle80perc_length+2)]\n\n  last10perc <- rep(1, last10perc_length)\n\n  prob_vector <- c(first10perc, middle80perc, last10perc)\n\n  return(prob_vector)\n}\n\n# Create function that builds the prob matrix\nget_prob_matrix <- function(size, prob_vector){\n\n  # Calculate quad size same way as circuits\n  quad_size <- ifelse(size %% 2 == 0, size/2, (size+1)/2)\n\n  # Create empty matrix for the quad\n  M <- matrix(0, nrow = quad_size, ncol = quad_size)\n\n  # For loop to assign prob_vector to correct cells in quadrant\n  for (i in 1:quad_size){\n\n    M[i, i:quad_size] <- prob_vector[i]\n    M[i:quad_size, i] <- prob_vector[i]\n  }\n\n  # if size is even,\n  if(size %% 2 == 0){\n    # mirror horizontally and column bind\n    M_right <- pracma::fliplr(M)\n    M <- cbind(M, M_right)\n\n    # then mirror vertically and row bind\n    M_down <- pracma::flipud(M)\n    M <- rbind(M, M_down)\n\n  }else{ # if size is odd\n    # mirror all but last col horizontally and col bind\n    M_right <- pracma::fliplr(M[ , 1:(quad_size-1)])\n    M <- cbind(M, M_right)\n\n    # then mirror all but last row vertically and row bind\n    M_down <- pracma::flipud(M[1:(quad_size-1), ])\n    M <- rbind(M, M_down)\n\n  }\n\n  return(M)\n}\n\n# Set parameters (size and color will be user inputs eventually)\n\n# Set the size of the desired grid and calculate number of circuits\nsize <- 40\ncircuits <- ifelse(size %% 2 == 0, size/2, (size+1)/2)\n\n# Define the colors\ncolors <- c(#\"#EDEFEE\", # Paper\n  \"#1A8BB3\", # Teal - no longer teal, just bright blue\n  \"#0950AE\", # Dark blue\n  \"#4DACE5\", # Light blue\n  \"#126DDB\", # Blue\n  \"#E48DC4\", # Pink\n  \"#ABA9E8\", # Light purple\n  \"#872791\", # Purple\n  \"#6D1617\", # Dark red\n  \"#B81634\", # Red\n  \"#DF3B43\", # Red orange\n  \"#E35C47\", # Orange\n  \"#EB8749\", # Light orange\n  \"#F6E254\", # Yellow\n  \"#7B442D\", # Brown\n  \"#000000\", # Black\n  \"#1A6E7E\", # Dark green - no longer dark green, now looks teal\n  \"#7CBF7B\", # Green\n  \"#ADD2B8\") # Light green\n\n# End user parameters\n\n# Generate the color vector\ncolor_vector <- generate_color_vector(size, colors)\n\n# Create a data frame for the grid coordinates\ndf <- expand.grid(x = 1:size, y = 1:size)\n\n# Add the corresponding color to each grid cell coordinate\ndf$color <- color_vector\n\n# Get the probability vector\nprob_vector <- get_prob_vector(circuits)\n\n# Assign probabilityes to matrix correctly\nM <- get_prob_matrix(size, prob_vector)\n\n# Apply prob matrix M to df as a vector\ndf$probs <- as.vector(M)\n\n#######################\n# New stuff starts here:\n\ndf <- \n  df |> mutate(color = case_when(\n    runif(n = 1,\n          min = .0001,\n          max = .9999) > probs ~ background,\n    .default = color\n  ))\n\n#######################\n# End new stuff\n\n# Check to see if the probs mapped correctly (yes, they did)\nggplot(df, aes(x = x, y = y, label = round(probs, 3))) +\n  geom_tile(aes(fill = probs), colour = \"white\") +\n    geom_text() +\n    scale_fill_gradient(low = \"white\", high = \"blue\") +\n\t\tscale_y_reverse() +\n    theme_void() +\n    coord_fixed()\n\n# Plot\nkelly_colors_III <-\n  ggplot(df, aes(x = x, y = y, fill = color)) +\n  geom_tile() +  # Add tiles\n  scale_fill_identity() +  # Use the colors stored as strings in the color column\n  theme_void() +  # Remove axis labels and background\n  coord_equal()  # Use equal aspect ratio\n\n# Print the plot\nkelly_colors_III\n```\n:::\n\n\n\n![](images/13-womp-womp-plot.png){fig-align=\"center\"}\n\nHahaha, oh boyyyyy! Ok, well, I got what I wanted in a VERY binary sense. I just realized I only grabbed ONE `runif()` value üòÇ Hilarious. I need to grab a fresh one for each element of the size x size vector. First of all, I‚Äôm gonna get rid of the min and max arguments and just write a condition declaring the 0 and 1 states. Then, change my `case_when` section so that I‚Äôm iterating over the vector element by element with a fresh `runif()` pull each time. This should be a function, not a mutate.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a function that creates a new color column to replace the old one\nget_kelly_III_vector <- function(df, background){\n  \n  # Write a loop that iterates over each row in df\n  for (i in 1:nrow(df)){\n    \n    if (df$probs[i] == 0){\n      df$color[i] <- background\n    } else if (df$probs[i] == 1){\n      df$color[i] <- df$color[i]\n    } else {\n      \n      # If the random is greater than probs, assign background, if not, do nothing\n      # grab a random number between 0 and 1\n      random <- runif(n = 1)\n      \n      if (random > df$probs[i]){\n        df$color[i] <- background\n      }\n    }\n  }\n  \n  return(df)\n  \n}\n\ndf <- get_kelly_III_vector(df, background)\n\n# Try the plot again\nkelly_colors_III <-\n  ggplot(df, aes(x = x, y = y, fill = color)) +\n  geom_tile() +  # Add tiles\n  scale_fill_identity() +  # Use the colors stored as strings in the color column\n  theme_void() +  # Remove axis labels and background\n  coord_equal()  # Use equal aspect ratio\n\n# Print the plot\nkelly_colors_III\n```\n:::\n\n\n\n![](images/14-wassup-party-people.png){fig-align=\"center\"}\n\nAYYYYYYYYY YAAAAAS!!! WHAT‚ÄôS UP PARTY PEOPLLLLLE!!! This is some proGRESS! How exciting. Let‚Äôs look at it alongside piece III:  \n\n::: {layout-ncol=\"2\"}\n![Original photograph of Piece III from ellsworthkelly.org](images/Original-piece-III.png)\n\n![MINE I JUST MADE!!!](images/15-mine-so-far.png)\n:::\n\nNow, I can finally see if the color probabilities really matter. A few days ago, I had discovered that some colors appeared more prominently than others, assuming my counting was correct. I actually considered inputting every single cell of his original into excel and running some actual calculations, but I gave myself a stern talking to and decided against that. For now. \n\nThe truth is, I don‚Äôt think I have enough information (from Kelly‚Äôs interviews or the piece itself) to know whether or not he actually intended there to be a higher instance of certain colors (namely black, blues, and oranges). While I do think that I could increase the probability of black, blues, oranges, etc, I know that would be VERY annoying to code unless I also asked the user to input the likelihood ratings for each of their chosen colors. Sounds like a larger cognitive lift than I'd like for both the user and myself ü•≤\n\nWhat I do know is that in Kelly‚Äôs pieces, no more than one or two squares of the same color ever seem to appear together, varying by piece, and I don‚Äôt even know how I‚Äôd set that constraint on my piece at this point. I think I‚Äôd have to take the color vector, make it into a matrix, then run through cell by cell and ask if the cells around it were the same color as it. If so, change the color to something other than its color or the colors of the cells around it. Or, assign the color vector to an empty matrix cell-by-cell in columns, checking each time to see that the color in the cells above and to the left don't match. And I'd have to set conditions for edge cases (if col == 1, don't check the cell to the left, if row == 1, don't check the cell above, etc). And that sounds like a lot of work. Kelly was doing this by hand, essentially drawing colors from a hat. If he selected a color that was a duplicate of one of the colors he had already placed, he could simply toss it back in the hat and grab another random color. Watch, I'm gonna come back tomorrow and say I've decided to add this. \n\nBUT! Kelly has several squares of the same color paired in piece 3! Just no more than two at a time. So.. I'd need to check to see if both adjacent squares were the same color, and only THEN take action to change the current square. See, now my brain wants to do this. It's a curse.\n\nOk, enough analysis. Let‚Äôs generate a few more and see what they look like! Then, it‚Äôs bedtime for this brain. I have a Brandon Sanderson novel to get back to and cats to feed.\n\n::: {layout-ncol=\"2\"}\n![](images/16-random-1.png)  \n\n![](images/16-random-2.png)  \n\n![](images/16-random-3.png)  \n\n![](images/16-random-4.png)  \n:::\n\nWords cannot express how happy these little color bombs make me. BEDTIME!  \n\n[**Note from Future Libby: Past Libby really was exhausted but elated, and I love that for us. I remember these little coding mysteries running nonstop in my brain at that time.**]  \n\nThis was a lot of color and a lot of code. If you're up for more (yes, there's more), you can head to [the sixth part in this series]() when it exists.  \n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}